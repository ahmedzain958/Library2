What is a domain layer?
The domain layer is the central layer of your app. It includes the code that describes your domain space along with the logic that manipulates it. You’ll probably find at least the following objects in every domain layer you work with:

entities: Objects that model your domain space.
value objects: Another kind of object that models your domain space.
interactors/use cases: Logic to handle entities and/or value objects and produce a result.
repository interfaces: Define contracts for data source access.

This layer encompasses the business logic of the app. Your business logic is one of the most important parts of your app, as it defines how the app works. The less you mess with it, the better! That’s why the domain layer shouldn’t depend on other layers.

For example, imagine you change your data layer by migrating from REST to GraphQL.
Or you change your presentation layer by migrating the UI to Jetpack Compose.
 None of those changes have anything to do with the business logic.
As such, they shouldn’t affect the domain layer at all.


Do you really need a domain layer?
Whether a domain layer is necessary is a source of debate in the Android community. Some people argue that it doesn’t make sense to have one in Android apps.

At a high level, a lot of Android apps follow the same simple pattern. They:

Get data from a data source.
Show the data in the UI.
Update the data source with new data.
From a layered architecture point of view, it seems like a data and a presentation layer would be enough!

And they are — for the app to work, at least. You just need to pass data between the layers, maybe add some logic in your ViewModels to handle the data, and off to the Play Store it goes.

You have a working app, but you forgot about something — or someone — really important. You forgot about you.

Having a domain layer is a way of protecting yourself as a developer. Sure, it can seem like unnecessary, redundant work, but it pays off in the long run by:

Keeping your code clean and easy to maintain by focusing the business logic in one layer only. Single responsibility code is easier to manage.
Defining boundaries between code that implements app logic and code that has nothing to do with that logic, like UI or framework code. Given how fast the Android framework changes, this separation is critical.
Easing the onboarding of future developers, who can study the layer to understand how the app works.
If you’re working with a small codebase, it’s true that a domain layer won’t make much of a difference. Yet, small apps are becoming increasingly rare. Even for apps that are small feature-wise, code gets really complex, really fast. It might seem like over-engineering at first, but sooner rather than later,
 it’ll turn out to be a life- and sanity-saving design decision.