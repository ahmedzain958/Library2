https://en.wikipedia.org/wiki/Test_double

In computer programming and computer science, programmers employ a technique called automated unit testing to reduce the likelihood of bugs occurring in the software. Frequently, the final release software consists of a complex set of objects or procedures interacting together to create the final result. In automated unit testing, it may be necessary to use objects or procedures that look and behave like their release-intended counterparts, but are actually simplified versions that reduce the complexity and facilitate testing. A test double is a generic (meta) term used for these objects or procedures.

Types of test doubles
Gerard Meszaros[1] identified several terms for what he calls,
 "Test Doubles." Using his vocabulary, there are at least five types of Test Doubles:

Test stub — used for providing the tested code with "indirect input".
Mock object — used for verifying "indirect output" of the tested code, by first defining the expectations before the tested code is executed.
Test spy — used for verifying "indirect output" of the tested code, by asserting the expectations afterwards, without having defined the expectations before the tested code is executed. It helps in recording information about the indirect object created.
Fake object — used as a simpler implementation, e.g. using an in-memory database in the tests instead of doing real database access.
Dummy object — used when a parameter is needed for the tested method but without actually needing to use the parameter.




ex:

This is not an example of dependency injection because the Car class is constructing its own Engine. This can be problematic because:

Car and Engine are tightly coupled - an instance of Car uses one type of Engine, and no subclasses or alternative implementations can easily be used.
 If the Car were to construct its own Engine, you would have to create two types of Car instead of just reusing the same Car for engines of type Gas and Electric.

The hard dependency on Engine makes testing more difficult. Car uses a real instance of Engine,
 thus preventing you from using a test double to modify Engine for different test cases.